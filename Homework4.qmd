---
title: "Homework 4"
format: pdf
editor: visual
---

##Task 1: Conceptual Questions 

###1. What is the purpose of the lapply() function? What is the equivalent purrr function?

The lapply() function applies any function to lists. The equivalent purr function is map().

###2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = "kendall")on each element of the list. Write code to do this below! (Iâ€™m really trying to ask you how you specify method = "kendall" when calling lapply())


```{r}

```

###3. What are two advantages of using purrr functions instead of the BaseR apply family?

The two advantage of using the purrr function is the consistency between functions (i.e the first agrument to all map functions is the data).The purr fuction also has more functionality such as modify(), map2(), and imap().

###4. What is a side-effect function?

A side-effect functions don't return the modified agrument i.e. print(), write_csv(). 

###5. Why can you name a variable sd in a function and not cause any issues with the sd function?


##Task 2: Writing R functinos 

###1. Write a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE.If a value is missing for the vector of responses (i.e. an NA is present), allow for additional arguments to the mean() function (elipses) that removes the NA values in the computation.



```{r}
getRMSE<-function(n, resp, pred,...){
SE <- (resp-pred)^2
mean <- mean(SE,...)
RMSE <- sqrt(mean)
return(RMSE)
}
```

###2. Test your RMSE function using this data. Repeat after replacing two of the response values with missing values (NA_real_).

```{r}
#Without Missing Values 
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
getRMSE(n,resp,pred)

#With Missing Values
set.seed(10)
n <- 100
x <- runif(n)
resp2 <- 3 + 10*x + rnorm(n)
pred2 <- predict(lm(resp ~ x), data.frame(x))
getRMSE(n,resp,pred)
random_na <- sample(length(resp2),2)
resp2[random_na]<- NA_real_
pred2 <- predict(lm(resp2 ~ x), data.frame(x))
getRMSE(n,resp2,pred2)
getRMSE(n,resp2,pred2,na.rm = TRUE)
```


##Task 3: Querying an API and tidy-style function 



